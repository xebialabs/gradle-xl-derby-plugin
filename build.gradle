plugins {
    id 'groovy'
    id 'idea'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'maven-publish'
    id 'nebula.release' version '15.3.1'
    id 'signing'
}

group = 'com.xebialabs.gradle.plugins'
defaultTasks 'build'

def releasedVersion = "10.3.0-${(new Date().format('Mdd.Hmm'))}"
project.ext.set("releasedVersion", releasedVersion)

sourceCompatibility = languageLevel
targetCompatibility = languageLevel

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    compile "org.apache.derby:derbynet:$derbyVersion"
    compile "org.apache.derby:derbyclient:$derbyVersion"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

test {
    useJUnitPlatform()
}

if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)

                groupId 'com.xebialabs.gradle.plugins'
                artifactId 'gradle-xl-derby-plugin'
                version releasedVersion

                pom {
                    name = 'Gradle Derby Plugin'
                    description = 'The easy way to get start/stop Derby with Gradle'
                    url = 'https://github.com/xebialabs/gradle-xl-derby-plugin.git'
                    licenses {
                        license {
                            name = 'GPLv2 with Digital.ai FLOSS License Exception'
                            url = 'https://github.com/xebialabs/gradle-xl-derby-plugin/blob/master/LICENSE'
                        }
                    }

                    scm {
                        url = 'https://github.com/xebialabs/gradle-xl-derby-plugin'
                    }

                    developers {
                        developer {
                            id = 'mwinkels'
                            name = 'Maarten Winkels'
                            email = 'mwinkels@digital.ai'
                        }
                        developer {
                            id = 'vpugar-digital'
                            name = 'Vedran Pugar'
                            email = 'vpugar@digital.ai'
                        }
                        developer {
                            id = 'bnechyporenko'
                            name = 'Bogdan Nechyporenko'
                            email = 'bnechyporenko@digital.ai'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
        }
    }
} else {
    publishing {
        publications {
            myLibrary(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "${project.property("nexusBaseUrl")}/repositories/releases"
                credentials {
                    username = project.property("nexusUserName")
                    password = project.property("nexusPassword")
                }
            }
        }
    }
}

jar {
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    signing {
        sign publishing.publications.mavenJava
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.property("sonatypeUsername")
                password = project.property("sonatypePassword")
            }
        }
    }
}

import com.xebialabs.gradle.release.NebulaRelease

task nebulaRelease(type: NebulaRelease)

task uploadArchives {
    dependsOn publish
}

task dumpVersion {
    doLast {
        file(buildDir).mkdirs()
        def out = file("$buildDir/version.dump")
        out.write("version=$project.version")
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}
